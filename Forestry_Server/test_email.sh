#!/bin/bash

# Script para probar el sistema de email de Forestry
# Aseg√∫rate de que la aplicaci√≥n est√© ejecut√°ndose en http://localhost:8080

echo "üß™ Probando Sistema de Email - Forestry"
echo "======================================"

# Colores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar mensajes
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${YELLOW}‚ÑπÔ∏è $1${NC}"
}

# Verificar si la aplicaci√≥n est√° ejecut√°ndose
print_info "Verificando que la aplicaci√≥n est√© ejecut√°ndose..."
if curl -s http://localhost:8080/swagger > /dev/null; then
    print_success "Aplicaci√≥n ejecut√°ndose en http://localhost:8080"
else
    print_error "La aplicaci√≥n no est√° ejecut√°ndose. Inicia la aplicaci√≥n primero."
    echo "Comando: dotnet run"
    exit 1
fi

echo ""
print_info "Iniciando pruebas de email..."

# 1. Probar configuraci√≥n b√°sica
echo ""
print_info "1. Probando configuraci√≥n b√°sica..."
TEST_RESPONSE=$(curl -s -X POST http://localhost:8080/api/email/test \
  -H "Content-Type: application/json" \
  -d '{"testEmail": "joeldgjo98@gmail.com"}')

if echo "$TEST_RESPONSE" | grep -q "success.*true"; then
    print_success "Configuraci√≥n b√°sica: OK"
else
    print_error "Configuraci√≥n b√°sica: FALL√ì"
    echo "Respuesta: $TEST_RESPONSE"
fi

# 2. Probar env√≠o de email personalizado
echo ""
print_info "2. Probando env√≠o de email personalizado..."
CUSTOM_RESPONSE=$(curl -s -X POST http://localhost:8080/api/email/send \
  -H "Content-Type: application/json" \
  -d '{
    "to": "joeldgjo98@gmail.com",
    "subject": "Prueba Personalizada - Forestry System",
    "body": "<h1>¬°Hola!</h1><p>Esta es una prueba del sistema de email de Forestry.</p>",
    "isHtml": true
  }')

if echo "$CUSTOM_RESPONSE" | grep -q "success.*true"; then
    print_success "Email personalizado: OK"
else
    print_error "Email personalizado: FALL√ì"
    echo "Respuesta: $CUSTOM_RESPONSE"
fi

# 3. Probar notificaci√≥n de registro
echo ""
print_info "3. Probando notificaci√≥n de registro..."
REGISTER_RESPONSE=$(curl -s -X POST http://localhost:8080/api/email/register \
  -H "Content-Type: application/json" \
  -d '{
    "email": "joeldgjo98@gmail.com",
    "username": "usuario_prueba",
    "password": "password123"
  }')

if echo "$REGISTER_RESPONSE" | grep -q "success.*true"; then
    print_success "Notificaci√≥n de registro: OK"
else
    print_error "Notificaci√≥n de registro: FALL√ì"
    echo "Respuesta: $REGISTER_RESPONSE"
fi

# 4. Probar alerta de emergencia
echo ""
print_info "4. Probando alerta de emergencia..."
EMERGENCY_RESPONSE=$(curl -s -X POST http://localhost:8080/api/email/emergency \
  -H "Content-Type: application/json" \
  -d '{
    "location": "Bosque Nacional Test",
    "description": "Prueba de alerta de emergencia del sistema",
    "recipients": ["joeldgjo98@gmail.com"]
  }')

if echo "$EMERGENCY_RESPONSE" | grep -q "success.*true"; then
    print_success "Alerta de emergencia: OK"
else
    print_error "Alerta de emergencia: FALL√ì"
    echo "Respuesta: $EMERGENCY_RESPONSE"
fi

echo ""
echo "üéØ Resumen de Pruebas:"
echo "====================="
echo "‚úÖ Configuraci√≥n b√°sica"
echo "‚úÖ Email personalizado"
echo "‚úÖ Notificaci√≥n de registro"
echo "‚úÖ Alerta de emergencia"

echo ""
print_info "üìß Verifica tu bandeja de entrada en joeldgjo98@gmail.com"
print_info "üìß Revisa tambi√©n la carpeta de spam si no encuentras los emails"

echo ""
print_info "üîß Para ver logs detallados:"
echo "   docker-compose logs forestry-api | grep -i email"

echo ""
print_success "¬°Pruebas completadas! üöÄ" 